{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ravi\\\\Desktop\\\\GATE-CSE-notes-main\\\\all in one\\\\Health app\\\\health-app\\\\src\\\\pages\\\\logfood\\\\log-food-page.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './log.css'; // Ensure your CSS is in the log.css file\nimport { Pie } from 'react-chartjs-2'; // Importing Pie chart from react-chartjs-2\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js'; // Chart.js setup\nimport { Bar } from 'react-chartjs-2';\nimport { FaCamera } from 'react-icons/fa'; // Importing the camera icon for image capture\nimport { useNavigate, useLocation } from 'react-router-dom'; // for navigation\n\n// Registering the chart components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nconst LogFoodPage = () => {\n  _s();\n  var _location$state;\n  const [foodInput, setFoodInput] = useState('');\n  const [quantity, setQuantity] = useState(100);\n  const [unit, setUnit] = useState(1); // Meal type is always breakfast\n  const [suggestions, setSuggestions] = useState([]);\n  const [foodData, setFoodData] = useState({});\n  const [popupVisible, setPopupVisible] = useState(false);\n  const [totalCalories, setTotalCalories] = useState(0);\n  const [recommendedCalories, setRecommendedCalories] = useState(360); // Recommended calories for breakfast (fixed)\n  const [loggedCalories, setLoggedCalories] = useState(0); // Logged calories for breakfast on selected date\n  const [macroNutrients, setMacroNutrients] = useState({\n    carbs: 0,\n    proteins: 0,\n    fats: 0,\n    magnesium: 0,\n    sodium: 0\n  });\n  const [breakfastmacroNutrients, setBreakfastmacroNutrients] = useState({\n    carbs: 0,\n    proteins: 0,\n    fats: 0\n  });\n  const [selectedDate, setSelectedDate] = useState(''); // Store selected date\n  const [recommendedtotalCalories, setRecommendedtotalCalories] = useState(0);\n  const location = useLocation();\n  const mealType = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.mealType) || \"breakfast\";\n  const navigate = useNavigate(); // Initialize navigate function\n\n  // Fetch total calorie intake and user profile data on page load\n  useEffect(() => {\n    fetchTotalCalories();\n    fetchMacroNutrients();\n    fetchRecommendedtotalCalories();\n    fetchbreakfastmacroNutrients(); // Fetch logged breakfast data for the selected date\n  }, [mealType]); // Fetch data whenever the meal type or date changes\n\n  // Fetch total calories for the user\n  const fetchTotalCalories = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5001/user-calories', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      setTotalCalories(data.totalCalories);\n    } catch (error) {\n      console.error(\"Error fetching total calories:\", error);\n    }\n  };\n  const fetchRecommendedtotalCalories = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/api/users/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      const mealRecommendedtotalCalories = data.calorieIntake; // Fetch calorie intake for the selected meal type\n      setRecommendedtotalCalories(mealRecommendedtotalCalories);\n    } catch (error) {\n      console.error(\"Error fetching recommended calories:\", error);\n    }\n  };\n\n  // Fetch macro nutrients from the user profile\n  const fetchMacroNutrients = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:5000/api/users/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      setMacroNutrients({\n        carbs: data.macros.carbs || 0,\n        proteins: data.macros.protein || 0,\n        fats: data.macros.fats || 0,\n        magnesium: data.macros.magnesium || 0,\n        sodium: data.macros.sodium || 0\n      });\n    } catch (error) {\n      console.error(\"Error fetching macro nutrients:\", error);\n    }\n  };\n\n  // Fetch logged calories and macro nutrients for breakfast on the selected date\n  const fetchbreakfastmacroNutrients = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error(\"No token found, user is not logged in\");\n      return;\n    }\n    const selectedDate = new Date().toISOString().split('T')[0]; // Automatically detects today's date\n\n    try {\n      const response = await fetch(`http://localhost:5001/total-breakfast-calories?mealType=${mealType}`, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Sending token in the Authorization header\n        }\n      });\n      const data = await response.json();\n      if (data && data.totalBreakfastCalories !== undefined) {\n        console.log(data);\n        setLoggedCalories(data.totalBreakfastCalories);\n        setBreakfastmacroNutrients({\n          carbs: data.totalCarbs,\n          proteins: data.totalProteins,\n          fats: data.totalFats\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching logged breakfast data:\", error);\n    }\n  };\n\n  // Handle search input change and fetch suggestions\n  const handleSearchChange = async e => {\n    const searchTerm = e.target.value.trim();\n    setFoodInput(searchTerm);\n    if (searchTerm === \"\") {\n      setSuggestions([]);\n      return;\n    }\n    try {\n      const response = await fetch(`http://localhost:5001/search?query=${searchTerm}`);\n      const data = await response.json();\n      setSuggestions(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // Fetch product details and show in popup\n  const getProduct = async code => {\n    const response = await fetch(`http://localhost:5001/product/${code}`);\n    const data = await response.json();\n    const adjustedQuantity = quantity || 100;\n    setFoodData({\n      ...data,\n      calories: data.calories * adjustedQuantity / 100,\n      carbs: data.carbs * adjustedQuantity / 100,\n      proteins: data.proteins * adjustedQuantity / 100,\n      fats: data.fats * adjustedQuantity / 100\n    });\n    setSuggestions([]);\n    setPopupVisible(true);\n  };\n\n  // Close popup\n  const closePopup = () => {\n    setPopupVisible(false);\n    setFoodInput('');\n  };\n\n  // Save food data to the database with meal type (breakfast, lunch, dinner)\n  const saveData = async () => {\n    const token = localStorage.getItem('token');\n    const data = {\n      code: foodData.code,\n      name: foodData.name,\n      calories: foodData.calories,\n      carbs: foodData.carbs,\n      proteins: foodData.proteins,\n      fats: foodData.fats,\n      mealType: mealType // Include meal type in the data\n    };\n    const response = await fetch('http://localhost:5001/save', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(data)\n    });\n    if (response.ok) {\n      alert('Food saved successfully');\n      fetchTotalCalories();\n      setSuggestions([]);\n      closePopup();\n    }\n  };\n\n  // Pie Chart Data for Macro Nutrients{total calorie intake}\n  const calorieData = {\n    labels: [\"Carbs\", \"Proteins\", \"Fats\", \"Magnesium\", \"Sodium\"],\n    datasets: [{\n      data: [macroNutrients.carbs, macroNutrients.proteins, macroNutrients.fats, macroNutrients.magnesium, macroNutrients.sodium],\n      backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\", \"#1E90FF\", \"#6A0572\"],\n      borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\", \"#1871C9\", \"#690D62\"],\n      borderWidth: 1\n    }]\n  };\n  const mealData = {\n    breakfastdata: {\n      labels: [\"Carbs\", \"Proteins\", \"Fats\"],\n      datasets: [{\n        data: [breakfastmacroNutrients.carbs, breakfastmacroNutrients.proteins, breakfastmacroNutrients.fats],\n        backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\"],\n        borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\"],\n        borderWidth: 1\n      }]\n    },\n    lunchdata: {\n      labels: [\"Carbs\", \"Proteins\", \"Fats\"],\n      datasets: [{\n        data: [breakfastmacroNutrients.carbs, breakfastmacroNutrients.proteins, breakfastmacroNutrients.fats],\n        backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\"],\n        borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\"],\n        borderWidth: 1\n      }]\n    },\n    dinnerdata: {\n      labels: [\"Carbs\", \"Proteins\", \"Fats\"],\n      datasets: [{\n        data: [breakfastmacroNutrients.carbs, breakfastmacroNutrients.proteins, breakfastmacroNutrients.fats],\n        backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\"],\n        borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\"],\n        borderWidth: 1\n      }]\n    }\n  };\n\n  // Dynamically access the data based on mealType\n  const selectedMealData = mealData[`${mealType}data`]; // This dynamically picks 'breakfastdata', 'lunchdata', or 'dinnerdata'\n\n  console.log(selectedMealData); // This will log the selected data (e.g., breakfast data\n\n  const breakfastBarChartData = {\n    labels: [\"Carbs\", \"Proteins\", \"Fats\"],\n    datasets: [{\n      label: 'Macro nutrients data',\n      data: [breakfastmacroNutrients.carbs, breakfastmacroNutrients.proteins, breakfastmacroNutrients.fats],\n      backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\"],\n      borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\"],\n      borderWidth: 1\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"log-food-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search for a Food Product\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Calories: \", totalCalories]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: foodInput,\n        onChange: handleSearchChange,\n        placeholder: \"Enter food name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: quantity,\n        onChange: e => setQuantity(Number(e.target.value)),\n        placeholder: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setUnit(Number(e.target.value)),\n        value: unit,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 1,\n          children: \"gm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 0.001,\n          children: \"mg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 1000,\n          children: \"kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"suggestions\",\n      className: \"suggestions\",\n      children: suggestions.length > 0 ? suggestions.map(product => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => getProduct(product.code),\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 29\n        }, this)\n      }, product.code, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No suggestions available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-icon\",\n      onClick: () => navigate(\"/image-cap\"),\n      children: /*#__PURE__*/_jsxDEV(FaCamera, {\n        size: 40,\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box total-calorie-intake\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Total Calorie Intake \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"circle-progress\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle\",\n          style: {\n            width: `${totalCalories / recommendedtotalCalories * 100}%`,\n            height: `${totalCalories / recommendedtotalCalories * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logged-text\",\n        children: [\"Logged: \", totalCalories, \" / \", recommendedtotalCalories, \" kcal\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"macro-nutrients-pie-chart\",\n        children: /*#__PURE__*/_jsxDEV(Pie, {\n          data: calorieData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box breakfast-nutrition\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Breakfast Nutrition for \", selectedDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"circle-progress\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circle\",\n          style: {\n            width: `${loggedCalories / recommendedCalories * 100}%`,\n            height: `${loggedCalories / recommendedCalories * 100}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logged-text\",\n        children: [\"Logged: \", loggedCalories, \" / \", recommendedCalories, \" kcal\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"macro-nutrients-pie-chart\",\n        children: /*#__PURE__*/_jsxDEV(Pie, {\n          data: BreakfastData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box breakfast-macro-nutrients-bar-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Breakfast Nutrition info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        data: breakfastBarChartData,\n        options: {\n          responsive: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }, this), popupVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"popupContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [foodData.name, \" (\", quantity, \"g)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Calories:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 28\n          }, this), \" \", foodData.calories.toFixed(2), \" kcal\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Carbohydrates:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 28\n          }, this), \" \", foodData.carbs.toFixed(2), \" g\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Proteins:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 28\n          }, this), \" \", foodData.proteins.toFixed(2), \" g\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Fats:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 28\n          }, this), \" \", foodData.fats.toFixed(2), \" g\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveData,\n        children: \"Log food\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closePopup,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 9\n  }, this);\n};\n_s(LogFoodPage, \"RuTYQZT70VJYXP2kmoZxbHPvUR8=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = LogFoodPage;\nexport default LogFoodPage;\nvar _c;\n$RefreshReg$(_c, \"LogFoodPage\");","map":{"version":3,"names":["React","useState","useEffect","Pie","Chart","ChartJS","ArcElement","Tooltip","Legend","Bar","FaCamera","useNavigate","useLocation","jsxDEV","_jsxDEV","register","LogFoodPage","_s","_location$state","foodInput","setFoodInput","quantity","setQuantity","unit","setUnit","suggestions","setSuggestions","foodData","setFoodData","popupVisible","setPopupVisible","totalCalories","setTotalCalories","recommendedCalories","setRecommendedCalories","loggedCalories","setLoggedCalories","macroNutrients","setMacroNutrients","carbs","proteins","fats","magnesium","sodium","breakfastmacroNutrients","setBreakfastmacroNutrients","selectedDate","setSelectedDate","recommendedtotalCalories","setRecommendedtotalCalories","location","mealType","state","navigate","fetchTotalCalories","fetchMacroNutrients","fetchRecommendedtotalCalories","fetchbreakfastmacroNutrients","token","localStorage","getItem","response","fetch","headers","data","json","error","console","mealRecommendedtotalCalories","calorieIntake","macros","protein","Date","toISOString","split","totalBreakfastCalories","undefined","log","totalCarbs","totalProteins","totalFats","handleSearchChange","e","searchTerm","target","value","trim","getProduct","code","adjustedQuantity","calories","closePopup","saveData","name","method","body","JSON","stringify","ok","alert","calorieData","labels","datasets","backgroundColor","borderColor","borderWidth","mealData","breakfastdata","lunchdata","dinnerdata","selectedMealData","breakfastBarChartData","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","Number","id","length","map","product","onClick","size","color","style","width","height","BreakfastData","options","responsive","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/ravi/Desktop/GATE-CSE-notes-main/all in one/Health app/health-app/src/pages/logfood/log-food-page.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './log.css'; // Ensure your CSS is in the log.css file\r\nimport { Pie } from 'react-chartjs-2';  // Importing Pie chart from react-chartjs-2\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';  // Chart.js setup\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { FaCamera } from 'react-icons/fa'; // Importing the camera icon for image capture\r\nimport { useNavigate ,useLocation} from 'react-router-dom'; // for navigation\r\n\r\n// Registering the chart components\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\nconst LogFoodPage = () => {\r\n    const [foodInput, setFoodInput] = useState('');\r\n    const [quantity, setQuantity] = useState(100);\r\n    const [unit, setUnit] = useState(1); // Meal type is always breakfast\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [foodData, setFoodData] = useState({});\r\n    const [popupVisible, setPopupVisible] = useState(false);\r\n    const [totalCalories, setTotalCalories] = useState(0);\r\n    const [recommendedCalories, setRecommendedCalories] = useState(360); // Recommended calories for breakfast (fixed)\r\n    const [loggedCalories, setLoggedCalories] = useState(0); // Logged calories for breakfast on selected date\r\n    const [macroNutrients, setMacroNutrients] = useState({ carbs: 0, proteins: 0, fats: 0, magnesium: 0, sodium: 0 });\r\n    const [breakfastmacroNutrients, setBreakfastmacroNutrients] = useState({ carbs: 0, proteins: 0, fats: 0 });\r\n    const [selectedDate, setSelectedDate] = useState(''); // Store selected date\r\n    const [recommendedtotalCalories, setRecommendedtotalCalories] = useState(0);\r\n\r\n    const location = useLocation(); \r\n    const mealType = location.state?.mealType || \"breakfast\";\r\n\r\n    const navigate = useNavigate(); // Initialize navigate function\r\n\r\n    // Fetch total calorie intake and user profile data on page load\r\n    useEffect(() => {\r\n        fetchTotalCalories();\r\n        fetchMacroNutrients();\r\n        fetchRecommendedtotalCalories();\r\n        fetchbreakfastmacroNutrients(); // Fetch logged breakfast data for the selected date\r\n    },  [mealType]); // Fetch data whenever the meal type or date changes\r\n\r\n    // Fetch total calories for the user\r\n    const fetchTotalCalories = async () => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            const response = await fetch('http://localhost:5001/user-calories', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            const data = await response.json();\r\n            setTotalCalories(data.totalCalories);\r\n        } catch (error) {\r\n            console.error(\"Error fetching total calories:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchRecommendedtotalCalories = async () => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            const response = await fetch('http://localhost:5000/api/users/profile', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            const data = await response.json();\r\n            const mealRecommendedtotalCalories = data.calorieIntake; // Fetch calorie intake for the selected meal type\r\n            setRecommendedtotalCalories(mealRecommendedtotalCalories);\r\n        } catch (error) {\r\n            console.error(\"Error fetching recommended calories:\", error);\r\n        }\r\n    };\r\n\r\n    // Fetch macro nutrients from the user profile\r\n    const fetchMacroNutrients = async () => {\r\n        try {\r\n            const token = localStorage.getItem('token');\r\n            const response = await fetch('http://localhost:5000/api/users/profile', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n            });\r\n            const data = await response.json();\r\n            setMacroNutrients({\r\n                carbs: data.macros.carbs || 0,\r\n                proteins: data.macros.protein || 0,\r\n                fats: data.macros.fats || 0,\r\n                magnesium: data.macros.magnesium || 0,\r\n                sodium: data.macros.sodium || 0,\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error fetching macro nutrients:\", error);\r\n        }\r\n    };\r\n\r\n    // Fetch logged calories and macro nutrients for breakfast on the selected date\r\n    const fetchbreakfastmacroNutrients = async () => {\r\n        const token = localStorage.getItem('token');\r\n        \r\n        if (!token) {\r\n            console.error(\"No token found, user is not logged in\");\r\n            return;\r\n        }\r\n\r\n        const selectedDate = new Date().toISOString().split('T')[0]; // Automatically detects today's date\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:5001/total-breakfast-calories?mealType=${mealType}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`, // Sending token in the Authorization header\r\n                },\r\n            });\r\n\r\n            const data = await response.json();\r\n            \r\n            if (data && data.totalBreakfastCalories !== undefined) {\r\n                console.log(data)\r\n                setLoggedCalories(data.totalBreakfastCalories);\r\n                setBreakfastmacroNutrients({\r\n                    carbs: data.totalCarbs,\r\n                    proteins: data.totalProteins,\r\n                    fats: data.totalFats,\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching logged breakfast data:\", error);\r\n        }\r\n    };\r\n    \r\n    // Handle search input change and fetch suggestions\r\n    const handleSearchChange = async (e) => {\r\n        const searchTerm = e.target.value.trim();\r\n        setFoodInput(searchTerm);\r\n\r\n        if (searchTerm === \"\") {\r\n            setSuggestions([]);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:5001/search?query=${searchTerm}`);\r\n            const data = await response.json();\r\n            setSuggestions(data);\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n    };\r\n\r\n    // Fetch product details and show in popup\r\n    const getProduct = async (code) => {\r\n        const response = await fetch(`http://localhost:5001/product/${code}`);\r\n        const data = await response.json();\r\n\r\n        const adjustedQuantity = quantity || 100;\r\n\r\n        setFoodData({\r\n            ...data,\r\n            calories: (data.calories * adjustedQuantity) / 100,\r\n            carbs: (data.carbs * adjustedQuantity) / 100,\r\n            proteins: (data.proteins * adjustedQuantity) / 100,\r\n            fats: (data.fats * adjustedQuantity) / 100,\r\n        });\r\n\r\n        setSuggestions([]);\r\n        setPopupVisible(true);\r\n    };\r\n\r\n    // Close popup\r\n    const closePopup = () => {\r\n        setPopupVisible(false);\r\n        setFoodInput('');\r\n    };\r\n\r\n    // Save food data to the database with meal type (breakfast, lunch, dinner)\r\n    const saveData = async () => {\r\n        const token = localStorage.getItem('token');\r\n\r\n        const data = {\r\n            code: foodData.code,\r\n            name: foodData.name,\r\n            calories: foodData.calories,\r\n            carbs: foodData.carbs,\r\n            proteins: foodData.proteins,\r\n            fats: foodData.fats,\r\n            mealType: mealType, // Include meal type in the data\r\n        };\r\n\r\n        const response = await fetch('http://localhost:5001/save', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(data),\r\n        });\r\n\r\n        if (response.ok) {\r\n            alert('Food saved successfully');\r\n            fetchTotalCalories();\r\n            setSuggestions([]);\r\n            closePopup();\r\n        }\r\n    };\r\n\r\n    // Pie Chart Data for Macro Nutrients{total calorie intake}\r\n    const calorieData = {\r\n        labels: [\"Carbs\", \"Proteins\", \"Fats\", \"Magnesium\", \"Sodium\"],\r\n        datasets: [\r\n            {\r\n                data: [\r\n                    macroNutrients.carbs,\r\n                    macroNutrients.proteins,\r\n                    macroNutrients.fats,\r\n                    macroNutrients.magnesium,\r\n                    macroNutrients.sodium\r\n                ],\r\n                backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\", \"#1E90FF\", \"#6A0572\"],\r\n                borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\", \"#1871C9\", \"#690D62\"],\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    const mealData = {\r\n        breakfastdata: {\r\n          labels: [\"Carbs\", \"Proteins\", \"Fats\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                breakfastmacroNutrients.carbs,\r\n                breakfastmacroNutrients.proteins,\r\n                breakfastmacroNutrients.fats,\r\n              ],\r\n              backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\"],\r\n              borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\"],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        },\r\n        lunchdata: {\r\n          labels: [\"Carbs\", \"Proteins\", \"Fats\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                breakfastmacroNutrients.carbs,\r\n                breakfastmacroNutrients.proteins,\r\n                breakfastmacroNutrients.fats,\r\n              ],\r\n              backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\"],\r\n              borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\"],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        },\r\n        dinnerdata: {\r\n          labels: [\"Carbs\", \"Proteins\", \"Fats\"],\r\n          datasets: [\r\n            {\r\n              data: [\r\n                breakfastmacroNutrients.carbs,\r\n                breakfastmacroNutrients.proteins,\r\n                breakfastmacroNutrients.fats,\r\n              ],\r\n              backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\"],\r\n              borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\"],\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        },\r\n      };\r\n      \r\n      // Dynamically access the data based on mealType\r\n      const selectedMealData = mealData[`${mealType}data`];  // This dynamically picks 'breakfastdata', 'lunchdata', or 'dinnerdata'\r\n      \r\n      console.log(selectedMealData);  // This will log the selected data (e.g., breakfast data\r\n\r\n    const breakfastBarChartData = {\r\n        labels: [\"Carbs\", \"Proteins\", \"Fats\"],\r\n        datasets: [\r\n            {\r\n                label: 'Macro nutrients data',\r\n                data: [\r\n                    breakfastmacroNutrients.carbs,\r\n                    breakfastmacroNutrients.proteins,\r\n                    breakfastmacroNutrients.fats,\r\n                ],\r\n                backgroundColor: [\"#FF6B6B\", \"#4ECDC4\", \"#FFD166\"],\r\n                borderColor: [\"#FF3B3B\", \"#4AACC4\", \"#FFAA33\"],\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className=\"log-food-page\">\r\n            <h1>Search for a Food Product</h1>\r\n            <p>Total Calories: {totalCalories}</p>\r\n\r\n            <div className=\"search-container\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={foodInput}\r\n                    onChange={handleSearchChange}\r\n                    placeholder=\"Enter food name\"\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    value={quantity}\r\n                    onChange={(e) => setQuantity(Number(e.target.value))}\r\n                    placeholder=\"100\"\r\n                />\r\n                <select onChange={(e) => setUnit(Number(e.target.value))} value={unit}>\r\n                    <option value={1}>gm</option>\r\n                    <option value={0.001}>mg</option>\r\n                    <option value={1000}>kg</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div id=\"suggestions\" className=\"suggestions\">\r\n                {suggestions.length > 0 ? (\r\n                    suggestions.map((product) => (\r\n                        <div key={product.code} onClick={() => getProduct(product.code)}>\r\n                            <strong>{product.name}</strong>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p>No suggestions available</p>\r\n                )}\r\n            </div>\r\n\r\n            {/* Camera Icon - Navigate to /image-cap when clicked */}\r\n            <div className=\"camera-icon\" onClick={() => navigate(\"/image-cap\")}>\r\n                <FaCamera size={40} color=\"white\" />\r\n            </div>\r\n\r\n            {/* Total Calorie Intake Box */}\r\n            <div className=\"box total-calorie-intake\">\r\n                <h2>Total Calorie Intake </h2>\r\n                <div className=\"circle-progress\">\r\n                    <div className=\"circle\" style={{\r\n                        width: `${(totalCalories / recommendedtotalCalories) * 100}%`,\r\n                        height: `${(totalCalories / recommendedtotalCalories) * 100}%`\r\n                    }}></div>\r\n                </div>\r\n                <div className=\"logged-text\">Logged: {totalCalories} / {recommendedtotalCalories} kcal</div>\r\n                <div className=\"macro-nutrients-pie-chart\">\r\n                    <Pie data={calorieData} />\r\n                </div>\r\n            </div>\r\n\r\n            {/* Breakfast Nutrition Section */}\r\n            <div className=\"box breakfast-nutrition\">\r\n                <h2>Breakfast Nutrition for {selectedDate}</h2>\r\n                <div className=\"circle-progress\">\r\n                    <div className=\"circle\" style={{\r\n                        width: `${(loggedCalories / recommendedCalories) * 100}%`,\r\n                        height: `${(loggedCalories / recommendedCalories) * 100}%`\r\n                    }}></div>\r\n                </div>\r\n                <div className=\"logged-text\">Logged: {loggedCalories} / {recommendedCalories} kcal</div>\r\n                <div className=\"macro-nutrients-pie-chart\">\r\n                    <Pie data={BreakfastData} />\r\n                </div>\r\n            </div>\r\n            <div className=\"box breakfast-macro-nutrients-bar-chart\">\r\n                <h2>Breakfast Nutrition info</h2>\r\n                <Bar data={breakfastBarChartData} options={{ responsive: true }} />\r\n            </div>\r\n\r\n            {popupVisible && (\r\n                <div className=\"popup\">\r\n                    <div id=\"popupContent\">\r\n                        <h2>{foodData.name} ({quantity}g)</h2>\r\n                        <p><strong>Calories:</strong> {foodData.calories.toFixed(2)} kcal</p>\r\n                        <p><strong>Carbohydrates:</strong> {foodData.carbs.toFixed(2)} g</p>\r\n                        <p><strong>Proteins:</strong> {foodData.proteins.toFixed(2)} g</p>\r\n                        <p><strong>Fats:</strong> {foodData.fats.toFixed(2)} g</p>\r\n                    </div>\r\n                    <button onClick={saveData}>Log food</button>\r\n                    <button onClick={closePopup}>Close</button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogFoodPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}